package com.json.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.json.greendao.ChannelItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHANNEL_ITEM".
*/
public class ChannelItemDao extends AbstractDao<ChannelItem, Void> {

    public static final String TABLENAME = "CHANNEL_ITEM";

    /**
     * Properties of entity ChannelItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Integer.class, "id", false, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property OrderId = new Property(2, Integer.class, "orderId", false, "ORDER_ID");
        public final static Property Selected = new Property(3, Integer.class, "selected", false, "SELECTED");
        public final static Property ChannelId = new Property(4, String.class, "channelId", false, "CHANNEL_ID");
    };


    public ChannelItemDao(DaoConfig config) {
        super(config);
    }
    
    public ChannelItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHANNEL_ITEM\" (" + //
                "\"ID\" INTEGER," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"ORDER_ID\" INTEGER," + // 2: orderId
                "\"SELECTED\" INTEGER," + // 3: selected
                "\"CHANNEL_ID\" TEXT);"); // 4: channelId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHANNEL_ITEM\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChannelItem entity) {
        stmt.clearBindings();
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
 
        Integer orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindLong(3, orderId);
        }
 
        Integer selected = entity.getSelected();
        if (selected != null) {
            stmt.bindLong(4, selected);
        }
 
        String channelId = entity.getChannelId();
        if (channelId != null) {
            stmt.bindString(5, channelId);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public ChannelItem readEntity(Cursor cursor, int offset) {
        ChannelItem entity = new ChannelItem( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // orderId
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // selected
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // channelId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ChannelItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setOrderId(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setSelected(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setChannelId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(ChannelItem entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(ChannelItem entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
